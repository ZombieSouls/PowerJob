# 构建 PowerJob 测试环境
# todo docker构建镜像依赖maven完成打包

version: '3.7'
services:
  powerjob-server:
    build:
      context: ../../powerjob-server/docker
    deploy:
      resources:
        limits:
          memory: 896M
    container_name: powerjob-server
    image: powerjob-server-postgres:daily_env
#    image: powerjob/powerjob-server:test_env
    restart: always
    environment:
      PARAMS: "--spring.profiles.active=daily --db_url=jdbc:log4jdbc:postgresql://host.docker.internal:5432/power_job_daily?currentSchema=power_job"
      #      PARAMS: "--spring.profiles.active=daily --spring.datasource.core.jdbc-url=jdbc:postgresql://host.docker.internal:5432/power_job_daily?currentSchema=power_job"
      #      PARAMS: "--spring.profiles.active=daily --spring.datasource.core.jdbc-url=jdbc:mysql://powerjob-mysql:3306/powerjob-daily?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai --oms.storage.dfs.mysql_series.url=jdbc:mysql://powerjob-mysql:3306/powerjob-daily?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai"
      JVMOPTIONS: "-server -XX:+UseG1GC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=7 -XX:GCLogFileSize=100M -Xloggc:/root/powerjob/server/gc.log"
    ports:
      - "7700:7700"
      - "10086:10086"
      - "10010:10010"
    volumes:
      - ~/powerjob-data/powerjob-server:/root/powerjob/server/
      - ~/.m2:/root/.m2
    #   see: https://docs.docker.com/desktop/networking/#i-want-to-connect-from-a-container-to-a-service-on-the-host
    extra_hosts:
      - host.docker.internal:host-gateway

  powerjob-worker-agent:
    build:
      context: ../../powerjob-worker-agent
    deploy:
      resources:
        limits:
          memory: 384M
    container_name: powerjob-worker-agent
    image: powerjob-worker-agent-postgres:daily_env
#    image: powerjob/powerjob-worker-agent:test_env
    restart: always
    depends_on:
      #      - powerjob-db
      - powerjob-server
    ports:
      - "5002:5005"
      - "10002:10000"
      - "27777:27777"
    volumes:
      - ~/powerjob-data/powerjob-worker-agent:/root
    entrypoint:
      - "sh"
      - "-c"
      - "./wait-for-it.sh powerjob-server:7700 --strict -- java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=10000 -Dcom.sun.management.jmxremote.rmi.port=10000 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -server -XX:+UseG1GC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=7 -XX:GCLogFileSize=100M -Xloggc:/root/gc.log -jar /powerjob-agent.jar --app powerjob-worker-samples --server powerjob-server:7700"
    #   see: https://docs.docker.com/desktop/networking/#i-want-to-connect-from-a-container-to-a-service-on-the-host
    extra_hosts:
      - host.docker.internal:host-gateway

  powerjob-worker-agent2:
    deploy:
      resources:
        limits:
          memory: 384M
    container_name: powerjob-worker-agent2
    image: powerjob-worker-agent-postgres:daily_env
#    image: powerjob/powerjob-worker-agent:test_env
    restart: always
    depends_on:
      #      - powerjob-db
      - powerjob-server
    ports:
      - "5003:5005"
      - "10003:10000"
      - "27778:27777"
    volumes:
      - ~/powerjob-data/powerjob-worker-agent2:/root
    entrypoint:
      - "sh"
      - "-c"
      - "./wait-for-it.sh powerjob-server:7700 --strict -- java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=10000 -Dcom.sun.management.jmxremote.rmi.port=10000 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -server -XX:+UseG1GC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=7 -XX:GCLogFileSize=100M -Xloggc:/root/gc.log -jar /powerjob-agent.jar --app powerjob-worker-samples --server powerjob-server:7700"
    #   see: https://docs.docker.com/desktop/networking/#i-want-to-connect-from-a-container-to-a-service-on-the-host
    extra_hosts:
      - host.docker.internal:host-gateway
